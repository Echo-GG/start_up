#include <iostream>
#include <cmath>
using namespace std;
class Point {
	double x, y;  //x和y坐标
public:
	Point();  //缺省构造函数，设x和y坐标为0
	Point(double x_value, double y_value); //有参构造
	double getX();	//返回x的值
	double getY();	//返回U的值
	void setXY(double x1, double y1);
	void setX(double x_value);
	void setY(double y_value);
	double getDisTo(Point &p);
};

class Circle {
	Point centre; //圆心
	double radius;	//半径
public:
	Circle();	//设置圆心位置为(0，0)，半径为1
	Circle(double x, double y, double r);	//有参构造，设置圆心和半径
	void moveCentreTo(double x1, double y1);	//圆心位置移动到(x1，y1)
	int contain(Point &p);	//判断圆与点p的关系，如果点p在y圆内则返回1，否则返回0
};
//下面完成两个类的类定义和主函数
Point::Point(): x(0), y(0) {}
Point::Point(double x_value, double y_value) : x(x_value), y(y_value) {}
double Point::getX() 
{
	return x;
}
double Point::getY()  
{
	return y;
}
void Point::setXY(double x1, double y1)
	{
        x = x1;
        y = y1;
    }
void Point::setX(double x_value) 
	{
        x = x_value;
    }
void Point::setY(double y_value)
	{
        y = y_value;
    }
double Point::getDisTo(Point &p) 
{
	return sqrt(pow((x - p.x),2) + pow((y - p.y),2));
}

Circle::Circle():centre(0, 0), radius(1) {}
Circle::Circle(double x, double y, double r) : centre(x, y), radius(r) {}
void Circle::moveCentreTo(double x1, double y1) 
	{
        centre.setXY(x1, y1);
    }
int Circle::contain(Point &p) 
	{
        return (centre.getDisTo(p) <= radius) ? 1 : 0;
    }
int main() 
{
    double x, y, r;
    cin >> x >> y >> r;
    Circle circle(x, y, r);
    int n;
    cin >> n;
    Point points[n];
    for (int i = 0; i < n; ++i) 
	{
        double px, py;
        cin >> px >> py;
        points[i] = Point(px, py);
    }
    for (int i = 0; i < n; ++i) 	
	{
        if (circle.contain(points[i])) 
		{
            cout << "inside" << endl;
        }
		else 
		{
            cout << "outside" << endl;
        }
    }
    double new_x, new_y;
    cin >> new_x >> new_y;
    circle.moveCentreTo(new_x, new_y);
    cout << "after move the centre of circle:" << endl;
    for (int i = 0; i < n; ++i) 
	{
        if (circle.contain(points[i])) 
		{
            cout << "inside" << endl;
        } 
		else 
		{
            cout << "outside" << endl;
        }
    }
    return 0;
}
//--------------------
